logging:
    level:
        org.springframework.web: INFO
        com.github.binarywang.demo.wx.mp: DEBUG
        me.chanjar.weixin: DEBUG
server:
    port: ${self.spring.server.port}
    servlet:
        context-path: ${self.spring.server.context-path}
netty:
    websocket:
        port: ${self.netty.websocket.port}
        # 读空闲
        readIdleTimeSeconds: ${self.netty.websocket.readIdleTimeSeconds}
        # 写空闲
        writeIdleTimeSeconds: ${self.netty.websocket.writeIdleTimeSeconds}
        # 读写空闲
        allIdleTimeSeconds: ${self.netty.websocket.allIdleTimeSeconds}
        # 根路径
        rootPath: ${self.netty.websocket.rootPath}
spring:
    profiles:
        active: dev
    datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://${self.spring.datasource.url}:${self.spring.datasource.port}/${self.spring.datasource.database}?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai
        username: ${self.spring.datasource.username}
        password: ${self.spring.datasource.password}
    data:
        redis:
            host: ${self.spring.redis.host}
            port: ${self.spring.redis.port}
            database: ${self.spring.redis.database}
            password: ${self.spring.redis.password}
            connect-timeout: ${self.spring.redis.timeout}
    servlet:
        multipart:
            max-file-size: 110MB
            max-request-size: 110MB
    main:
        lazy-initialization: ${self.spring.main.is-lazy}
mybatis-plus:
    global-config:
        db-config:
            logic-delete-field: is_deleted
            logic-delete-value: 1
            logic-not-delete-value: 0
    configuration:
        map-underscore-to-camel-case: true
        cache-enabled: false
        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
springdoc:
    swagger-ui:
        path: /swagger-ui.html
        tags-sorter: alpha
        operations-sorter: alpha
    api-docs:
        path: /v3/api-docs
    group-configs:
        -   group: 'default'
            paths-to-match: '/**'
            packages-to-scan: com.kkuil.blackchat
knife4j:
    enable: true
    setting:
        language: zh_cn
wechat:
    mp:
        callback: ${self.wechat.callback}
        configs:
            -   appId: ${self.wechat.appId}
                secret: ${self.wechat.secret}
                token: ${self.wechat.token}
                aesKey: ${self.wechat.aesKey}
rocketmq:
    name-server: ${self.rocketmq.name-server}
    # 默认的消息组
    producer:
        group: chatGroup
        send-message-timeout: 3000 # 发送消息超时时间，单位：毫秒。默认为 3000 。
        compress-message-body-threshold: 4096 # 消息压缩阀值，当消息体的大小超过该阀值后，进行消息压缩。默认为 4 * 1024B
        max-message-size: 4194304 # 消息体的最大允许大小。。默认为 4 * 1024 * 1024B
        retry-times-when-send-failed: 2 # 同步发送消息时，失败重试次数。默认为 2 次。
        retry-times-when-send-async-failed: 2 # 异步发送消息时，失败重试次数。默认为 2 次。
        retry-next-server: false # 发送消息给 Broker 时，如果发送失败，是否重试另外一台 Broker 。默认为 false
        access-key: ${self.rocketmq.access-key} # Access Key ，可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/acl/user_guide.md 文档
        secret-key: ${self.rocketmq.secret-key} # Secret Key
        enable-msg-trace: true # 是否开启消息轨迹功能。默认为 true 开启。可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/msg_trace/user_guide.md 文档
        customized-trace-topic: RMQ_SYS_TRACE_TOPIC # 自定义消息轨迹的 Topic 。默认为 RMQ_SYS_TRACE_TOPIC 。
    # Consumer 配置项
    consumer:
        access-key: ${self.rocketmq.access-key} # Access Key ，可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/acl/user_guide.md 文档
        secret-key: ${self.rocketmq.secret-key} # Secret Key
        listeners: # 配置某个消费分组，是否监听指定 Topic 。结构为 Map<消费者分组, <Topic, Boolean>> 。默认情况下，不配置表示监听。
            erbadagang-consumer-group:
                topic1: false # 关闭 test-consumer-group 对 topic1 的监听消费
